<div class="container">
    <div id="particles-js"></div>

    <div id="panel-blockchain">

        {{#each this.data}}
        <div class="block">
            <div class="prehash">
                <p>PREHASH:</p>
                {{PREHASH}}
            </div>
            <div class="content">
                <div class="contentm">
                    <p>Sender: </p> {{Sender}}
                    </br>
                    <p>Receiver: </p> {{Receiver}}
                    </br>
                    <p>Content: </p> {{MESSAGE}}
                    </br>
                    </br>
                    <p>Amount: </p> {{AMOUNT}}
                    </br>
                    <p id="timeblock">Time: </p> {{TIMESTAMP}}
                    </br>
                    </br>
                    <p id="idblock">Block {{ID_BLOCK}}</p>
                </div>
            </div>
            <div class="curhash">
                <p>CURHASH:</p>
                {{HASH}}
            </div>
        </div>
        {{/each}}

    </div>

    <div hidden="true">{{data}},{{n}}</div>
</div>


<script>
    function changeColor() {
        const listcolor = [
            'red', 'blue', 'purple', 'green', 'brown', 'orange', 'pink',
        ]
        const n = listcolor.length;
        const hashBlocks = document.querySelectorAll('.curhash');

        const connections = document.querySelectorAll('.connection');
        connections.forEach(connection => connection.parentNode.removeChild(connection));

        hashBlocks.forEach((block, index) => {

            // Lấy prehash của khối tiếp theo
            const nextBlock = block.parentNode.nextElementSibling.querySelector('.prehash');

            // Thiết lập màu sắc của khối curhash hiện tại
            block.style.color = listcolor[index % n];

            if (nextBlock) {
                // Thiết lập màu sắc của prehash của khối tiếp theo
                nextBlock.style.color = listcolor[index % n];

                // Tạo kết nối giữa khối curhash hiện tại và prehash của khối tiếp theo
                const connection = document.createElement('div');
                connection.classList.add('connection');
                connection.style.borderColor = listcolor[index % n];
                block.parentNode.appendChild(connection);
            }
        });
    }

    window.addEventListener('load', () => {
        changeColor();

    });

</script>
<script src="../../public/particles.js"></script>
<script src="../../public/app.js"></script>


<style>
    #particles-js {
        background-color: skyblue;
        height: 140vh;
        width: 98.9vw;
        position: absolute;
        z-index: -1;
        top: 100;
    }




    .block {
        position: relative;
        border: 1px #ccc;

        background-color: white;
        text-align: justify;
        border: 1px solid;
        display: grid;
        grid-template-rows: 1fr 4fr 1fr;
        margin: 20px;
        border-radius: 3%;

    }


    #idblock {
        text-align: center;
        padding-left: 11vw;
    }

    #timeblock {
        text-align: left;
    }

    .block p {
        font-weight: 700;
        border: 0;
        padding: 0;
        display: inline-block;
        color: black;

    }

    .prehash {
        border-bottom: 1px solid black;
        padding-left: 5px;
        padding-right: 5px;
        word-break: break-all;

    }

    .curhash {
        border-top: 1px solid black;
        padding-left: 5px;
        padding-right: 5px;
        word-break: break-all;

    }

    .content {
        position: relative;
        padding-left: 5px;
        padding-right: 5px;
    }

    .content:hover {
        background-image: url("../../public/bitcoin-vector-icon.webp");
        transform: rotateY(360deg);
        animation: spin 1.5s forwards;
        height: 100%;
        background-position: center;
        background-size:cover;
    }

    .content:hover .contentm {
        visibility: hidden;
    }

    @keyframes spin {
        from {
            transform: rotateY(-180deg);
        }

        to {
            transform: rotateY(0deg);
        }
    }


    .coin-img {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 50%;
        height: auto;
        opacity: 0;
        transition: opacity 0.2s ease-in-out;
    }

    .content:hover .coin-img {
        opacity: 1;
    }

    .container #panel-blockchain {
        overflow-y: auto;
        display: grid;
        height: 90vh;
        max-height: 700px;
        width: 95vw;
        grid-gap: 1%;
        grid-template-columns: repeat(3, 1fr);
        border: 1px solid;
        margin-top: 5%;
        margin-left: 2.5vw;
        margin-bottom: 5%;

    }

    .container {
        padding: 0;
        margin: 0;

    }

    .line {
        height: 1px;
        background-color: black;
        grid-column-start: 1;
        grid-column-end: -1;
        margin-top: calc(var(--gap) / 2);
    }
</style>